[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\panosmav\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\panosmav\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.1 (Oracle Corporation Java 17.0.2)
[debug]       Load.loadUnit: plugins took 150.8509ms
[debug]       Load.loadUnit: defsScala took 0.4481ms
[debug] [Loading] Scanning directory C:\Users\panosmav\.sbt\1.0\plugins
[debug]         Load.loadUnit: mkEval took 7.1571ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\panosmav\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 20.1077 ms
[info] loading settings for project global-plugins from idea.sbt ...
[debug]           Load.resolveProject(global-plugins) took 50.0107ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\panosmav\.sbt\1.0\plugins, plugins: List(<none>))) took 94.0992ms
[debug] [Loading] Done in C:\Users\panosmav\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 496.0863ms
[debug]       Load.loadUnit: cleanEvalClasses took 11.8399ms
[debug]     Load.loadUnit(file:/C:/Users/panosmav/.sbt/1.0/plugins/, ...) took 671.8042ms
[debug]   Load.apply: load took 864.9182ms
[debug]   Load.apply: resolveProjects took 5.29ms
[debug]   Load.apply: finalTransforms took 73.2726ms
[debug]   Load.apply: config.delegates took 8.9022ms
[debug]   Load.apply: Def.make(settings)... took 457.8711ms
[debug]   Load.apply: structureIndex took 117.2046ms
[debug]   Load.apply: mkStreams took 2.0188ms
[info] loading global plugins from C:\Users\panosmav\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3052.1759ms
[debug]           Load.loadUnit: plugins took 35.4091ms
[debug]           Load.loadUnit: defsScala took 0.0043ms
[debug] [Loading] Scanning directory C:\development\live_sport_events_challenge_zio\project
[debug]             Load.loadUnit: mkEval took 0.4296ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\development\live_sport_events_challenge_zio\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.4605 ms
[info] loading settings for project live_sport_events_challenge_zio-build from idea2.sbt ...
[debug]               Load.resolveProject(live_sport_events_challenge_zio-build) took 2.1413ms
[debug]             Load.loadTransitive: finalizeProject(Project(id live_sport_events_challenge_zio-build, base: C:\development\live_sport_events_challenge_zio\project, plugins: List(<none>))) took 5.151ms
[debug] [Loading] Done in C:\development\live_sport_events_challenge_zio\project, returning: (live_sport_events_challenge_zio-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 108.67ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.2044ms
[debug]         Load.loadUnit(file:/C:/development/live_sport_events_challenge_zio/project/, ...) took 148.2754ms
[debug]       Load.apply: load took 150.0806ms
[debug]       Load.apply: resolveProjects took 0.1134ms
[debug]       Load.apply: finalTransforms took 14.3506ms
[debug]       Load.apply: config.delegates took 0.3859ms
[debug]       Load.apply: Def.make(settings)... took 96.3686ms
[debug]       Load.apply: structureIndex took 36.9631ms
[debug]       Load.apply: mkStreams took 0.0022ms
[info] loading project definition from C:\development\live_sport_events_challenge_zio\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2716.664ms
[debug]     Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory C:\development\live_sport_events_challenge_zio
[debug]       Load.loadUnit: mkEval took 0.3397ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.6291 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 49.4836ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\development\live_sport_events_challenge_zio, plugins: List(<none>))) took 54.0999ms
[debug] [Loading] Done in C:\development\live_sport_events_challenge_zio, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4718.6993ms
[debug]     Load.loadUnit: cleanEvalClasses took 73.4697ms
[debug]   Load.loadUnit(file:/C:/development/live_sport_events_challenge_zio/, ...) took 7509.8215ms
[debug] Load.apply: load took 7512.538ms
[debug] Load.apply: resolveProjects took 0.159ms
[debug] Load.apply: finalTransforms took 37.9895ms
[debug] Load.apply: config.delegates took 0.5518ms
[debug] Load.apply: Def.make(settings)... took 143.7951ms
[debug] Load.apply: structureIndex took 48.5039ms
[debug] Load.apply: mkStreams took 0.0028ms
[info] set current project to live_sport_events_challenge_zio (in build file:/C:/development/live_sport_events_challenge_zio/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 55737 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 55737, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to live_sport_events_challenge_zio (in build file:/C:/development/live_sport_events_challenge_zio/)
[debug] > Exec(idea-shell, None, None)
