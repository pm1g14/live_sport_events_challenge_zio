[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\panosmav\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\panosmav\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.1 (Oracle Corporation Java 17.0.2)
[debug]       Load.loadUnit: plugins took 155.0181ms
[debug]       Load.loadUnit: defsScala took 0.2993ms
[debug] [Loading] Scanning directory C:\Users\panosmav\.sbt\1.0\plugins
[debug]         Load.loadUnit: mkEval took 8.3226ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\panosmav\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 31.9595 ms
[info] loading settings for project global-plugins from idea.sbt ...
[debug]           Load.resolveProject(global-plugins) took 89.1779ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\panosmav\.sbt\1.0\plugins, plugins: List(<none>))) took 157.1814ms
[debug] [Loading] Done in C:\Users\panosmav\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 525.1952ms
[debug]       Load.loadUnit: cleanEvalClasses took 16.539ms
[debug]     Load.loadUnit(file:/C:/Users/panosmav/.sbt/1.0/plugins/, ...) took 709.3617ms
[debug]   Load.apply: load took 960.0111ms
[debug]   Load.apply: resolveProjects took 8.1133ms
[debug]   Load.apply: finalTransforms took 84.4976ms
[debug]   Load.apply: config.delegates took 10.7397ms
[debug]   Load.apply: Def.make(settings)... took 665.6344ms
[debug]   Load.apply: structureIndex took 140.8829ms
[debug]   Load.apply: mkStreams took 1.5998ms
[info] loading global plugins from C:\Users\panosmav\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3513.6149ms
[debug]           Load.loadUnit: plugins took 43.5495ms
[debug]           Load.loadUnit: defsScala took 0.006ms
[debug] [Loading] Scanning directory C:\development\live_sport_events_challenge_zio\project
[debug]             Load.loadUnit: mkEval took 0.5987ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\development\live_sport_events_challenge_zio\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.0599 ms
[info] loading settings for project live_sport_events_challenge_zio-build from idea1.sbt ...
[debug]               Load.resolveProject(live_sport_events_challenge_zio-build) took 10.4804ms
[debug]             Load.loadTransitive: finalizeProject(Project(id live_sport_events_challenge_zio-build, base: C:\development\live_sport_events_challenge_zio\project, plugins: List(<none>))) took 14.5106ms
[debug] [Loading] Done in C:\development\live_sport_events_challenge_zio\project, returning: (live_sport_events_challenge_zio-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 102.8184ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.9043ms
[debug]         Load.loadUnit(file:/C:/development/live_sport_events_challenge_zio/project/, ...) took 153.6854ms
[debug]       Load.apply: load took 156.4402ms
[debug]       Load.apply: resolveProjects took 0.1673ms
[debug]       Load.apply: finalTransforms took 21.4089ms
[debug]       Load.apply: config.delegates took 0.6665ms
[debug]       Load.apply: Def.make(settings)... took 192.7886ms
[debug]       Load.apply: structureIndex took 37.2202ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from C:\development\live_sport_events_challenge_zio\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2017.9066ms
[debug]     Load.loadUnit: defsScala took 0.0033ms
[debug] [Loading] Scanning directory C:\development\live_sport_events_challenge_zio
[debug]       Load.loadUnit: mkEval took 0.5027ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.1546 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 40.7352ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\development\live_sport_events_challenge_zio, plugins: List(<none>))) took 45.7036ms
[debug] [Loading] Done in C:\development\live_sport_events_challenge_zio, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4710.2194ms
[debug]     Load.loadUnit: cleanEvalClasses took 50.4858ms
[debug]   Load.loadUnit(file:/C:/development/live_sport_events_challenge_zio/, ...) took 6779.4824ms
[debug] Load.apply: load took 6781.3005ms
[debug] Load.apply: resolveProjects took 0.0869ms
[debug] Load.apply: finalTransforms took 31.1872ms
[debug] Load.apply: config.delegates took 0.4441ms
[debug] Load.apply: Def.make(settings)... took 99.2169ms
[debug] Load.apply: structureIndex took 34.3031ms
[debug] Load.apply: mkStreams took 0.002ms
[info] set current project to live_sport_events_challenge_zio (in build file:/C:/development/live_sport_events_challenge_zio/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 64740 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 64740, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to live_sport_events_challenge_zio (in build file:/C:/development/live_sport_events_challenge_zio/)
[debug] > Exec(idea-shell, None, None)
